import{T as z,V as u,q as M,r as S,M as T}from"./camera.79f4e44e.js";import{p as b}from"./psrdnoise.e749dbdf.js";class F extends z{constructor(t=64,c=1,r=8){const i=new Array(t+1).fill(0).map(()=>new u);i.forEach((s,l)=>{s.x=l/t-.5});const e=new M(i);super(e,t,c,r,!1),this.curve=e;const o=[],n=this.attributes.position.count;for(let s=0;s<n;s++)o.push(0,0,0);this.setAttribute("color",new S(o,3))}update(){C(this)}}function C(a){const{curve:t}=a,{tubularSegments:c,radius:r,radialSegments:i}=a.parameters,e=t.computeFrenetFrames(t.points.length,!1);a.tangents=e.tangents,a.normals=e.normals,a.binormals=e.binormals;const o=a.getAttribute("position"),n=a.getAttribute("normal"),s=new u,l=new u;for(let p=0;p<=c;p++)A(p);o.needsUpdate=!0,n.needsUpdate=!0;function A(p){const v=p/c,h=Math.sin(v*Math.PI)*r;l.copy(t.points[p]);let m=p*(i+1);const d=e.normals[p],g=e.binormals[p];for(let y=0;y<=i;y++){const w=y/i*Math.PI*2,f=Math.sin(w),x=-Math.cos(w);s.x=x*d.x+f*g.x,s.y=x*d.y+f*g.y,s.z=x*d.z+f*g.z,s.normalize(),o.setXYZ(m,l.x+h*s.x,l.y+h*s.y,l.z+h*s.z),n.setXYZ(m,s.x,s.y,s.z),m++}}}class I extends T{constructor(t,c){const r=t.tubularSegments||64,i=t.radius||.5,e=t.radialSegments||8,o=t.capSegments||4,n=new F(r,i,e,o);super(n,c),this.curve=this.geometry.curve,this.points=this.curve.points,this.to=new u,this.geometry.update()}lerpTo(t,c=.1,r){const i=new Float32Array(3),e=new Float32Array(3),o=new Float32Array(3);o[0]=t.x*.01+r*.04,o[1]=t.y*.01+r*.048,o[2]=t.z*.01+r*.06,b(o,i,r*2,e),this.to.copy(t),this.to.x+=e[0]*.05,this.to.y+=e[1]*.05,this.to.z+=e[2]*.05,this.points[0].lerp(this.to,c);for(let n=1;n<this.points.length;n++){const s=n/(this.points.length-1)-c/(this.points.length-1);this.curve.getPointAt(s,this.points[n])}this.geometry.update()}}export{I as T};
